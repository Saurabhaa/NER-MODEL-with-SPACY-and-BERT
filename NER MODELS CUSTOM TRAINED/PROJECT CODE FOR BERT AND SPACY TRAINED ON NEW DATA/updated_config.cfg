[paths]
train = "./train.spacy"
dev = "./test.spacy"
vectors = null
init_token =null



[system]
gpu_allocator = null

[nlp]
lang = "en"
pipeline = ["tok2vec", "ner"]
batch_size = 1000
disabled=[]
before_creation= null
after_creation= null
after_pipeline_creation =null
tokenizer ={"@tokenizers":"spacy.Tokenizer.v1"}


[components]

[components.ner]
factory = "ner"
incorrect_spans_keys = null
moves=null
scorer:{"@scorers":spacy.ner_scorer.v1"}
update_with_oracle_cut_size =100


[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = false
nO = null

[components.ner.model.tok2vec]
@architectures="spacy.Tok2VecListener.v1"
width = ${components.tok2vec.model.encode.width}
upstream ="*"

[components.tok2vec]
factory = "tok2vec"

[components.tok2vec.model]
@architectures="spacy.Tok2Vec.v2"

[components.tok2vec.model.embed]
@architectures="spacy.MultiHashEmbed.v2"
width =${components.tok2vec.model.encode.width}
attrs=["NORM","PREFIX","SUFFIX","SHAPE"]
rows =[5000,2500,2500,2500]
include_static_vectors =false

[components.tok2vec.model.encode]
@architectures="spacy.MaxoutWindowEncoder.v2"
width =96
depth =4
window_size = 1
maxout_pieces =3

[corpora.dev]
@readers ="spacy.Corpus.v1"
path = $(paths.dev)
max_length =0
gold_preproc =false
limit=0
augmenter =null


[corpora.train]
@readers ="spacy.Corpus.v1"
path = $(paths.train)
max_length =0
gold_preproc =false
limit=0
augmenter =null



[training]
train_corpus = "corpora.train"
dev_corpus = "corpora.dev"
seed = $(system.seed)
gpu_allocator = $(system.gpu_allocator)
dropout = 0.1
accumulate_gradient = 1
patience = 1600
max_epochs = 0
max_steps = 20000
eval_frequency = 200
frozen_components = []
annotating_components = []
before_to_disk = null



[training.batcher]
@batchers = "spacy.batch_by_padded.v1"
tolerance =0.2
get_length=null
discard_oversize = false


[training.batcher.size]
@schedules= "compounding.v1"
start =100
stop= 1000
compound =1.001
t =0.0

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar =false



[training.optimizer]
@optimizers = "Adam.v1"
learn_rate = 0.001
beta1 = 0.9
beta2 = 0.999
eps = 1e-8
grad_clip = 1.0

[pretraining]
path = null
vectors = null
corpus = null

[evaluation]
@evaluators = "spacy.ner"
thresholds = [0.5]
scorer = {"@scorers": "spacy.ner_scorer.v1"}
